// Code generated by MockGen. DO NOT EDIT.
// Source: backend.cs3219.comp.nus.edu.sg/database (interfaces: DatabaseApiTokenAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "backend.cs3219.comp.nus.edu.sg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseApiTokenAdapter is a mock of DatabaseApiTokenAdapter interface.
type MockDatabaseApiTokenAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseApiTokenAdapterMockRecorder
}

// MockDatabaseApiTokenAdapterMockRecorder is the mock recorder for MockDatabaseApiTokenAdapter.
type MockDatabaseApiTokenAdapterMockRecorder struct {
	mock *MockDatabaseApiTokenAdapter
}

// NewMockDatabaseApiTokenAdapter creates a new mock instance.
func NewMockDatabaseApiTokenAdapter(ctrl *gomock.Controller) *MockDatabaseApiTokenAdapter {
	mock := &MockDatabaseApiTokenAdapter{ctrl: ctrl}
	mock.recorder = &MockDatabaseApiTokenAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseApiTokenAdapter) EXPECT() *MockDatabaseApiTokenAdapterMockRecorder {
	return m.recorder
}

// CreateApiToken mocks base method.
func (m *MockDatabaseApiTokenAdapter) CreateApiToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApiToken indicates an expected call of CreateApiToken.
func (mr *MockDatabaseApiTokenAdapterMockRecorder) CreateApiToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiToken", reflect.TypeOf((*MockDatabaseApiTokenAdapter)(nil).CreateApiToken), arg0)
}

// DeleteApiToken mocks base method.
func (m *MockDatabaseApiTokenAdapter) DeleteApiToken(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiToken indicates an expected call of DeleteApiToken.
func (mr *MockDatabaseApiTokenAdapterMockRecorder) DeleteApiToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiToken", reflect.TypeOf((*MockDatabaseApiTokenAdapter)(nil).DeleteApiToken), arg0)
}

// GetAllApiTokens mocks base method.
func (m *MockDatabaseApiTokenAdapter) GetAllApiTokens() ([]*model.ApiToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApiTokens")
	ret0, _ := ret[0].([]*model.ApiToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApiTokens indicates an expected call of GetAllApiTokens.
func (mr *MockDatabaseApiTokenAdapterMockRecorder) GetAllApiTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApiTokens", reflect.TypeOf((*MockDatabaseApiTokenAdapter)(nil).GetAllApiTokens))
}

// IsValidToken mocks base method.
func (m *MockDatabaseApiTokenAdapter) IsValidToken(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidToken", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidToken indicates an expected call of IsValidToken.
func (mr *MockDatabaseApiTokenAdapterMockRecorder) IsValidToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidToken", reflect.TypeOf((*MockDatabaseApiTokenAdapter)(nil).IsValidToken), arg0)
}

// SetApiTokenState mocks base method.
func (m *MockDatabaseApiTokenAdapter) SetApiTokenState(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApiTokenState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApiTokenState indicates an expected call of SetApiTokenState.
func (mr *MockDatabaseApiTokenAdapterMockRecorder) SetApiTokenState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApiTokenState", reflect.TypeOf((*MockDatabaseApiTokenAdapter)(nil).SetApiTokenState), arg0, arg1)
}

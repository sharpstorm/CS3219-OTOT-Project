name: ci-tests
on: [push, pull_request]

jobs:
  test-go:
    runs-on: ubuntu-latest
    container: golang:1.19-buster
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ciuser
          POSTGRES_PASSWORD: cipassword
          POSTGRES_DB: cidb
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready -d cidb"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Set up repository
        uses: actions/checkout@main
      
      - name: Merge to main branch
        run: git checkout --progress --force ${{ github.sha }}

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: Setup PSQL
        run: |
          apt-get update
          apt-get install --yes --no-install-recommends postgresql-client
  
      - name: 'Setup Shell Scripts'
        run: 'chmod 755 ./ci-env/*.sh'

      - name: 'Init Test Env File'
        run: './ci-env/create-backend-env.sh'

      - name: Setup the database schema
        run: PGPASSWORD=cipassword psql -h postgres -d cidb -U ciuser -f dbstruct.sql

      - name: 'Run golang tests'
        run: 'cd backend && make test'

  build-react:
    runs-on: ubuntu-latest

    steps:
      - name: Set up repository
        uses: actions/checkout@main
      
      - name: Merge to main branch
        run: git checkout --progress --force ${{ github.sha }}

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 'Restore NPM Cache'
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-cache

      - name: 'Build And Lint Frontend'
        run: 'CI=false cd frontend && npm i && npm run-script lint && npm run-script build'
